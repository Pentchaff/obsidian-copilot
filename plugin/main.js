/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CopilotPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  model: "gpt-3.5-turbo",
  apiKey: "sk-xxxxxxxxxx",
  systemContentDraftSection: "You are Obsidian-Copilot, a friendly AI assistant that helps writers craft drafts based on their notes.\n\nYour task is to generate a few paragraphs based on a given section heading and related context of documents. When you reference content from a document, append the sentence with a markdown reference that links to the document's title. For example, if a sentence references context from 'Augmented Language Models.md', it should end with ([source](Augmented%20Language%20Models.md)).",
  systemContentDraftSectionNoContext: "You are Obsidian-Copilot, a friendly AI assistant that helps writers craft drafts based on their notes.\n\nYour task is to generate a few paragraphs based on a given section heading.",
  systemContentReflectWeek: "You are a friendly AI therapist that helps users reflect on their week and evoke feelings of gratitude, positivity, joy for life. Given their journal entries, write a paragraph for each of the following:\n\n* Celebrate what went well\n* Reflect on areas for growth\n* Suggest goals for next week"
};
var CopilotPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.processing = false;
  }
  // Opens a new pane to display the retrieved docs
  async openNewPane(content) {
    const filename = "Retrieved docs.md";
    let file = this.app.vault.getAbstractFileByPath(filename);
    if (file) {
      await this.app.vault.modify(file, content);
    } else {
      file = await this.app.vault.create(filename, content);
    }
    const existingLeaf = this.app.workspace.getLeavesOfType("markdown").find((leaf) => leaf.getDisplayText() === filename);
    if (existingLeaf) {
      existingLeaf.setViewState({ type: "markdown", state: { file } });
      existingLeaf.view.editor.setValue(content);
    } else {
      const leaf = this.app.workspace.getLeaf("split", "vertical");
      leaf.openFile(file);
    }
  }
  async queryLLM(messages, model, temperature = 0.7) {
    return await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.settings.apiKey}`
      },
      body: JSON.stringify({
        "model": model,
        "temperature": temperature,
        "messages": messages,
        "stream": true
      })
    });
  }
  async onload() {
    await this.loadSettings();
    async function read(reader, editor) {
      let buffer = "";
      const { value, done } = await reader.read();
      if (done) {
        statusBarItemEl.setText("Done with Copilot task!");
        return;
      }
      const decoded = new TextDecoder().decode(value);
      buffer += decoded;
      let start = 0;
      let end = buffer.indexOf("\n");
      while (end !== -1) {
        const message = buffer.slice(start, end);
        start = end + 1;
        try {
          const messageWithoutPrefix = message.replace("data: ", "");
          const json = JSON.parse(messageWithoutPrefix);
          let lastToken = "";
          if (json.choices && json.choices.length > 0 && json.choices[0].delta && json.choices[0].delta.content) {
            let token = json.choices[0].delta.content;
            if (token === " ") {
              lastToken += token;
              token = lastToken;
            } else {
              lastToken = token;
            }
            editor.replaceSelection(token);
          }
        } catch (err) {
        }
        end = buffer.indexOf("\n", start);
      }
      buffer = buffer.slice(start);
      requestAnimationFrame(() => read(reader, editor));
    }
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Copilot loaded");
    this.addCommand({
      id: "copilot-draft-section",
      name: "Draft Section",
      editorCallback: async (editor, view) => {
        var _a;
        const selection = editor.getSelection();
        const query = selection.replace(/[^a-z0-9 ]/gi, "");
        statusBarItemEl.setText("Running Copilot...");
        const restResponse = await fetch(`http://0.0.0.0:8000/get_chunks?query=${encodeURIComponent(query)}`);
        console.log("response", restResponse);
        if (!restResponse.ok) {
          console.error("An error occurred while fetching chunks", await restResponse.text());
          statusBarItemEl.setText("ERROR: No response from retrieval API");
          return;
        }
        const restData = await restResponse.json();
        const retrievedDocs = [];
        const relevantContent = [];
        for (let i = 0; i < restData.length; i++) {
          retrievedDocs.push(`[[${restData[i].title}]]

${restData[i].chunk}`);
          relevantContent.push(`Title: ${restData[i].title}
Context: ${restData[i].chunk}
`);
        }
        const retrievedDocsDisplay = retrievedDocs.join("\n---\n");
        console.log(`PARSED RETRIEVED DOCS: 

${retrievedDocsDisplay}`);
        this.openNewPane(retrievedDocsDisplay);
        const user_content = `Section heading: ${query}

${relevantContent.join("---\n")}

Draft:`;
        console.log(`USER CONTENT:

${user_content}`);
        const messages = [
          { "role": "system", "content": this.settings.systemContentDraftSection },
          { "role": "user", "content": user_content }
        ];
        const response = await this.queryLLM(messages, this.settings.model, 0.7);
        if (!response.ok) {
          const errorData = await response.json();
          console.error("An error occurred", errorData);
          statusBarItemEl.setText("ERROR: No response from LLM API");
        } else {
          const reader = (_a = response.body) == null ? void 0 : _a.getReader();
          editor.replaceSelection(selection + "\n\n");
          await read(reader, editor);
        }
      }
    });
    this.addCommand({
      id: "copilot-draft-section-no-context",
      name: "Draft Section (no context)",
      editorCallback: async (editor, view) => {
        var _a;
        const selection = editor.getSelection();
        const query = selection.replace(/[^a-z0-9 ]/gi, "");
        statusBarItemEl.setText("Running Copilot...");
        const user_content = `Section heading: ${query}

Draft:`;
        console.log(`USER CONTENT:

${user_content}`);
        const messages = [
          { "role": "system", "content": this.settings.systemContentDraftSectionNoContext },
          { "role": "user", "content": user_content }
        ];
        const response = await this.queryLLM(messages, this.settings.model, 0.7);
        if (!response.ok) {
          const errorData = await response.json();
          console.error("An error occurred", errorData);
          statusBarItemEl.setText("ERROR: No response from LLM API");
        } else {
          const reader = (_a = response.body) == null ? void 0 : _a.getReader();
          editor.replaceSelection(selection + "\n\n");
          await read(reader, editor);
        }
      }
    });
    this.addCommand({
      id: "copilot-reflect-week",
      name: "Reflect on the week",
      editorCallback: async (editor, view) => {
        var _a;
        statusBarItemEl.setText("Running Copilot...");
        const titleDateStr = view.file.basename;
        const date = new Date(titleDateStr);
        console.log(`Date: ${date.toISOString().slice(0, 10)}`);
        let pastContent = "";
        for (let i = 0; i < 7; i++) {
          date.setDate(date.getDate() - 1);
          const dateStr = date.toISOString().slice(0, 10);
          const dailyNote = this.app.vault.getAbstractFileByPath(`daily/${dateStr}.md`);
          console.log(`dateStr: ${dateStr}, dailyNote: ${dailyNote}`);
          if (dailyNote && dailyNote instanceof import_obsidian.TFile) {
            const noteContent = await this.app.vault.read(dailyNote);
            console.log(`dateStr: ${dateStr}, dailyNote: ${dailyNote}, noteContent:

${noteContent}`);
            pastContent += `Date: ${dateStr}

Journal entry:
${noteContent}
---
`;
          }
        }
        console.log(`PAST JOURNAL ENTRIES: 

${pastContent}`);
        this.openNewPane(pastContent);
        const user_content = `These are the journal entries for my week:
${pastContent}

Reflection:`;
        console.log(`USER CONTENT:

${user_content}`);
        const messages = [
          { "role": "system", "content": this.settings.systemContentReflectWeek },
          { "role": "user", "content": user_content }
        ];
        const response = await this.queryLLM(messages, this.settings.model, 0.7);
        if (!response.ok) {
          const errorData = await response.json();
          console.error("An error occurred", errorData);
          statusBarItemEl.setText("ERROR: No response from LLM API");
        } else {
          const reader = (_a = response.body) == null ? void 0 : _a.getReader();
          editor.replaceSelection("\n");
          await read(reader, editor);
        }
      }
    });
    this.addSettingTab(new CopilotSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var CopilotSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Obsidian Copilot" });
    new import_obsidian.Setting(containerEl).setName("OpenAI API Key").setDesc("Enter your OpenAI API key").addText((text) => text.setPlaceholder("API Key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Model Name").setDesc("Enter the model used for generation").addText((text) => text.setPlaceholder("Model name").setValue(this.plugin.settings.model).onChange(async (value) => {
      this.plugin.settings.model = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("System Prompt: Draft Section").setDesc("Define the prompt used for drafting a section with context").addText((text) => text.setPlaceholder("Prompt to draft a section").setValue(this.plugin.settings.systemContentDraftSection).onChange(async (value) => {
      this.plugin.settings.systemContentDraftSection = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("System Prompt: Draft Section (without context)").setDesc("Define the prompt used for drafting a section without context").addText((text) => text.setPlaceholder("Prompt to draft a section (without context)").setValue(this.plugin.settings.systemContentDraftSectionNoContext).onChange(async (value) => {
      this.plugin.settings.systemContentDraftSectionNoContext = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("System Prompt: Reflect on the week").setDesc("Define the prompt used` to reflect on the week").addText((text) => text.setPlaceholder("Prompt to reflect on the week").setValue(this.plugin.settings.systemContentReflectWeek).onChange(async (value) => {
      this.plugin.settings.systemContentReflectWeek = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
